% Python web-client programming general FAQs

<div class="expanded">

  * <p class="q">Is there any example code?</p>
    <p>Look in the examples directory of [mechanize](./).  Note that
    the examples on the [forms page](./forms.html) are executable as-is.
    Contributions of example code would be very welcome!

  * <p class="q">I want to see what my web browser is doing, but standard
    network sniffers like [ethereal](http://www.ethereal.com/) or netcat (nc)
    don't work for HTTPS.  How do I sniff HTTPS traffic?</p>
    <p>Three good options:

      * Mozilla plugin:
        [livehttpheaders](http://livehttpheaders.mozdev.org/).

      * [ieHTTPHeaders](http://www.blunck.info/iehttpheaders.html) does
        the same for MSIE.

      * Use [lynx](http://lynx.browser.org/) `-trace`, and filter out
        the junk with a script.

  * <p class="q">Embedded script is messing up my web-scraping.  What do I
    do?</p>
    <p>It is possible to embed script in HTML pages (sandwiched between
    `<SCRIPT>here</SCRIPT>` tags, and in `javascript:` URLs) - JavaScript /
    ECMAScript, VBScript, or even Python.  These scripts can do all sorts of
    things, including causing cookies to be set in a browser, submitting or
    filling in parts of forms in response to user actions, changing link
    colours as the mouse moves over a link, etc.

    If you come across this in a page you want to automate, you have four
    options.  Here they are, roughly in order of simplicity.

      * Simply figure out what the embedded script is doing and emulate it in
        your Python code: for example, by manually adding cookies to your
        `CookieJar` instance, calling methods on `HTMLForm`s, calling
        `urlopen`, etc.

      * Instead of using mechanize, automate a browser instead.  For example
        use MS Internet Explorer via its COM automation interfaces, using the
        [Python for Windows
        extensions](http://starship.python.net/crew/mhammond/), aka pywin32,
        aka win32all (e.g. [simple
        function](http://vsbabu.org/mt/archives/2003/06/13/ie_automation.html),
        [pamie](http://pamie.sourceforge.net/); [pywin32 chapter from the
        O'Reilly
        book](http://www.oreilly.com/catalog/pythonwin32/chapter/ch12.html)) or
        [ctypes](http://python.net/crew/theller/ctypes/) (
        [example](http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/305273).
        [This](http://www.brunningonline.net/simon/blog/archives/winGuiAuto.py.html)
        kind of thing may also come in useful on Windows for cases where the
        automation API is lacking.  For Firefox, there is
        [PyXPCOM](https://developer.mozilla.org/en/PyXPCOM).

      * Use Java's [HtmlUnit](http://htmlunit.sourceforge.net/) or
        [httpunit](httpunit.sourceforge.net) from Jython, since they know some
        JavaScript.

      * Get ambitious and automatically delegate the work to an appropriate
        interpreter (Mozilla's JavaScript interpreter, for instance).  I did a
        spike along these lines some years ago, but I think it would (still) be
        quite a lot of work to do well.

  * <p class="q">Misc links</p>

      * [Beautiful Soup](http://www.crummy.com/software/BeautifulSoup/) is a
        widely recommended HTML-parsing module.

      * [Selenium](http://www.openqa.org/selenium/): In-browser web functional
        testing.  If you need to test websites against real browsers, this is a
        standard way to do it.

      * O'Reilly book: Spidering Hacks.  Very Perl-oriented.

      * Standard extensions for web development with Firefox, which are also
        handy if you're scraping the web: [Web
        Developer](http://chrispederick.com/work/webdeveloper/) (amongst other
        things, this can display HTML form information),
        [Firebug](http://getfirebug.com/).

      * Similar functionality for IE6 and IE7: [Internet Explorer Developer
        Toolbar](http://www.google.co.uk/search?q=internet+explorer+developer+toolbar&btnI=I'm+Feeling+Lucky)
        (IE8 comes with this built-in, as does Google Chrome).

      * [Open source functional testing
        tools](http://www.opensourcetesting.org/functional.php).

      * [A HOWTO on web
        scraping](http://www.rexx.com/~dkuhlman/quixote_htmlscraping.html) from
        Dave Kuhlman.

  * <p class="q">Will any of this code make its way into the Python standard
    library?</p>

    <p>The request / response processing extensions to `urllib2` from mechanize
    have been merged into `urllib2` for Python 2.4.  The cookie processing has
    been added, as module `cookielib`.  There are other features that would be
    appropriate additions to urllib2, but since Python 2 is heading into
    bugfix-only mode, and I'm not using Python 3, they're unlikely to be added.

</div>

I prefer questions and comments to be sent to the [mailing
list](http://lists.sourceforge.net/lists/listinfo/wwwsearch-general) rather
than direct to me.

<!-- Local Variables: -->
<!-- fill-column:79 -->
<!-- End: -->
