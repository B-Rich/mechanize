<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN"
        "http://www.w3.org/TR/html4/strict.dtd">
@# This file is processed by EmPy
@{
from buildtools.colorize import colorize
import time
import buildtools.release
last_modified = buildtools.release.last_modified(empy.identify()[0])
try:
    base
except NameError:
    base = False
try:
    version
except NameError:
    version = "dummy version"
}
<html>
<!--This file was generated by EmPy: do not edit-->
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
  <meta name="author" content="John J. Lee &lt;jjl@@pobox.com&gt;">
  <meta name="date" content="@(time.strftime("%Y-%m-%d", last_modified))">
  <meta name="keywords" content="form,HTML,Python,web,client,client-side">
  <title>Forms</title>
  <style type="text/css" media="screen">@@import "../../styles/style.css";</style>
  <!--[if IE 6]>
  <style type="text/css" media="screen">@@import "../../styles/style-ie6.css";</style>
  <![endif]-->
  @[if base]<base href="http://wwwsearch.sourceforge.net/mechanize/forms.html">@[end if]
</head>
<body>

<div id="sf"><a href="http://sourceforge.net">
<img src="http://sourceforge.net/sflogo.php?group_id=48205&amp;type=2"
 width="125" height="37" alt="SourceForge.net Logo"></a></div>

<h1>mechanize documentation: forms</h1>

<div id="Content">

<p class="docwarning">This documentation is in need of reorganisation!</p>

<p>This page is the old ClientForm documentation.  ClientForm is now part of
mechanize, but the documentation hasn't been fully updated to reflect that:
what's here is correct, but not well-integrated with the rest of the
documentation.  This page deals with HTML form handling: parsing HTML forms,
filling them in and returning the completed forms to the server.  See
the <a href="../mechanize">main page</a> for how to obtain form objects from
a <code>mechanize.Browser</code>.

<p>Simple working example:

@{colorize("".join(open("examples/forms/simple.py").readlines()[2:]))}

<p>A more complicated working example:

<a name="example"></a>
@{colorize("".join(open("examples/forms/example.py").readlines()[2:]))}

<a name="notes"></a>

<p>All of the standard control types are supported: <code>TEXT</code>,
<code>PASSWORD</code>, <code>HIDDEN</code>, <code>TEXTAREA</code>,
<code>ISINDEX</code>, <code>RESET</code>, <code>BUTTON</code> (<code>INPUT
TYPE=BUTTON</code> and the various <code>BUTTON</code> types),
<code>SUBMIT</code>, <code>IMAGE</code>, <code>RADIO</code>,
<code>CHECKBOX</code>, <code>SELECT</code>/<code>OPTION</code> and
<code>FILE</code> (for file upload).  Both standard form encodings
(<code>application/x-www-form-urlencoded</code> and
<code>multipart/form-data</code>) are supported.

<p>The module is designed for testing and automation of web
interfaces, not for implementing interactive user agents.

<p><strong><em>Security note</em>: Remember that any passwords you store in
<code>HTMLForm</code> instances will be saved to disk in the clear if you
pickle them (directly or indirectly).  The simplest solution to this is to
avoid pickling <code>HTMLForm</code> objects.  You could also pickle before
filling in any password, or just set the password to <code>""</code> before
pickling.</strong>

<p>Python 2.0 or above is required.  To run the tests, you need the
<code>unittest</code> module (from <a
href="http://pyunit.sourceforge.net/">PyUnit</a>).  <code>unittest</code> is a
standard library module with Python 2.1 and above.

<p>For full documentation, see the docstrings.


<a name="parsers"></a>
<h2>Parsers</h2>

<p>There are two parsers.  See <a href="./#faq">the FAQ entry on XHTML</a> for
details.

<p><a href="http://www.egenix.com/files/python/mxTidy.html">mxTidy</a> or <a
href="http://utidylib.berlios.de/">µTidylib</a> can be useful for dealing with
bad HTML.


<a name="compat"></a>
<h2>Backwards-compatibility mode</h2>

<p>mechanize (and ClientForm 0.2) includes three minor backwards-incompatible
interface changes from ClientForm version 0.1.

<p>To make upgrading from ClientForm 0.1 easier, and to allow me to stop
supporting version ClientForm 0.1 sooner, there is support for operating in a
backwards-compatible mode, under which code written for ClientForm 0.1 should
work without modification.  This is done on a per-<code>HTMLForm</code> basis
via the
<code>.backwards_compat</code> attribute, but for convenience the
ParseResponse() and ParseFile() factory functions accept
<code>backwards_compat</code> arguments.  These backwards-compatibility
features will be removed soon.  The default is to operate in
backwards-compatible mode.  To run with backwards compatible mode turned
<em><strong>OFF</strong></em> (<strong>strongly recommended</strong>):

@{colorize(r"""
from mechanize import ParseResponse, urlopen
forms = ParseResponse(urlopen("http://example.com/"), backwards_compat=False)
# ...
""")}

<p>The backwards-incompatible changes are:

<ul>
<li><p>Ambiguous specification of controls or items now results in
AmbiguityError.  If you want the old behaviour, explicitly pass
<code>nr=0</code> to indicate you want the first matching control or item.

<li><p>Item label matching is now done by substring, not by strict
string-equality (but note leading and trailing space is always stripped).
(Control label matching is always done by substring.)

<li><p>Handling of disabled list items has changed.  First, note that handling
of disabled list items in ClientForm 0.1 (and in ClientForm 0.2's
backwards-compatibility mode!) is buggy: disabled items are successful
(ie. disabled item names are sent back to the server).  As a result, there was
no distinction to be made between successful items and selected items.  In
ClientForm 0.2, the bug is fixed, so this is no longer the case, and it is
important to note that list controls'
<code>.value</code> attribute contains only the <em>successful</em> item names;
items that are <em>selected </em> but not successful (because disabled) are not
included in <code>.value</code>.  Second, disabled list items may no longer be
deselected: AttributeError is raised in ClientForm 0.2, whereas deselection was
allowed in ClientForm 0.1.  The bug in ClientForm 0.1 and in ClientForm 0.2's
backwards-compatibility mode will not be fixed, to preserve compatibility and
to encourage people to upgrade to the new ClientForm
0.2 <code>backwards_compat=False</code> behaviour.  </ul>

<a name="credits"></a>
<h2>Credits</h2>

<p>Apart from Gisle Aas for allowing the original port from libwww-perl,
particular credit is due to Gary Poster and Benji York, and their employer,
Zope Corporation.  Thanks also to the many people who have contributed bug
reports.


<a name="faq"></a>
<h2>FAQs</h2>
<ul>
  <li>Doesn't the standard Python library module, <code>cgi</code>, do this?
  <p>No: the <code>cgi</code> module does the server end of the job.  It
     doesn't know how to parse or fill in a form or how to send it back to the
     server.
  <li>How do I figure out what control names and values to use?
  <p><code>print form</code> is usually all you need.
     In your code, things like the <code>HTMLForm.items</code> attribute of
     <code>HTMLForm</code> instances can be useful to inspect forms at
     runtime.  Note that it's possible to use item labels instead of item
     names, which can be useful &mdash; use the <code>by_label</code>
     arguments to the various methods, and the <code>.get_value_by_label()</code> /
     <code>.set_value_by_label()</code> methods on <code>ListControl</code>.
  <li>What do those <code>'*'</code> characters mean in the string
     representations of list controls?
  <p>A <code>*</code> next to an item means that item is selected.
  <li>What do those parentheses (round brackets) mean in the string
     representations of list controls?
  <p>Parentheses <code>(foo)</code> around an item mean that item is disabled.
  <li>Why doesn't &lt;some control&gt; turn up in the data returned by
     <code>.click*()</code> when that control has non-<code>None</code> value?
  <p>Either the control is disabled, or it is not successful for some other
     reason.  'Successful' (see HTML 4 specification) means that the control
     will cause data to get sent to the server.
  <li>Why does mechanize not follow the HTML 4.0 / RFC 1866 standards for
     <code>RADIO</code> and multiple-selection <code>SELECT</code> controls?
  <p>Because by default, it follows browser behaviour when setting the
     initially-selected items in list controls that have no items explicitly
     selected in the HTML. Use the <code>select_default</code> argument to
     <code>ParseResponse</code> if you want to follow the RFC 1866 rules
     instead.  Note that browser behaviour violates the HTML 4.01 specification
     in the case of <code>RADIO</code> controls.
  <li>Why does <code>.click()</code>ing on a button not work for me?
    <ul>
    <li>Clicking on a <code>RESET</code> button doesn't do anything, by design
        - this is a library for web automation, not an interactive browser.
        Even in an interactive browser, clicking on <code>RESET</code> sends
        nothing to the server, so there is little point in having
        <code>.click()</code> do anything special here.
    <li>Clicking on a <code>BUTTON TYPE=BUTTON</code> doesn't do anything
        either, also by design.  This time, the reason is that that
        <code>BUTTON</code> is only in the HTML standard so that one can attach
        callbacks to its events.  The callbacks are functions in
        <code>SCRIPT</code> elements (such as Javascript) embedded in the HTML,
        and their execution may result in information getting sent back to the
        server.  mechanize, however, knows nothing about these callbacks, so
        it can't do anything useful with a click on a <code>BUTTON</code> whose
        type is <code>BUTTON</code>.
    <li>Generally, embedded script may be messing things up in all kinds of
        ways.  See the answer to the next question.
    </ul>
  <li>Embedded script is messing up my form filling.  What do I do?
  <p>See the <a href="../../bits/GeneralFAQ.html">General FAQs</a> page and the
     next FAQ entry for what to do about this.
<!-- XXX example here -->
  <li>How do I change <code>INPUT TYPE=HIDDEN</code> field values (for example,
      to emulate the effect of JavaScript code)?
  <p>As with any control, set the control's <code>readonly</code> attribute
     false.
<p>@{colorize(r"""
form.find_control("foo").readonly = False  # allow changing .value of control foo
form.set_all_readonly(False)  # allow changing the .value of all controls
""")}
  </li>
  <li>I'm having trouble debugging my code.
  <p>The <a href="../ClientCookie/">ClientCookie</a> package makes it
     easy to get <code>.seek()</code>able response objects, which is
     convenient for debugging.  See also <a
     href="../ClientCookie/doc.html#debugging">here</a> for few
     relevant tips.  Also see <a href="../bits/GeneralFAQ.html"> General
     FAQs</a>.
  <li>I have a control containing a list of integers.  How do I select the one
     whose value is nearest to the one I want?
<p>@{colorize(r"""
import bisect
def closest_int_value(form, ctrl_name, value):
    values = map(int, [item.name for item in form.find_control(ctrl_name).items])
    return str(values[bisect.bisect(values, value) - 1])

form["distance"] = [closest_int_value(form, "distance", 23)]
""")}
  </li>
  <li>Where can I find out more about the HTML and HTTP standards?
  <ul>
     <li>W3C <a href="http://www.w3.org/TR/html401/">HTML 4.01
        Specification</a>.
     <li><a href="http://www.ietf.org/rfc/rfc1866.txt">RFC 1866</a> -
        the HTML 2.0 standard.
     <li><a href="http://www.ietf.org/rfc/rfc1867.txt">RFC 1867</a> -
        Form-based file upload.
     <li><a href="http://www.ietf.org/rfc/rfc2616.txt">RFC 2616</a> -
        HTTP 1.1 Specification.
  </ul>
</ul>

<p>I prefer questions and comments to be sent to the <a
href="http://lists.sourceforge.net/lists/listinfo/wwwsearch-general">
mailing list</a> rather than direct to me.

<p><a href="mailto:jjl@@pobox.com">John J. Lee</a>,
@(time.strftime("%B %Y", last_modified)).

</div>

<div id="Menu">

@(buildtools.release.navbar('forms'))

<br>

<a href="../#other">Other stuff</a><br>

<br>

<a href="./#example">Example</a><br>
<a href="./#notes">Notes</a><br>
<a href="./#parsers">Parsers</a><br>
<a href="./#compat">Compatibility</a><br>
<a href="./#credits">Credits</a><br>
<a href="./#download">Download</a><br>
<a href="./#faq">FAQs</a><br>

</div>

</body>
</html>
